import{e,S as t,a as i,s as n,b as s,d as r}from"../../runtime.mjs";class SQLiteBaseIntegerBuilder extends t{static[e]="SQLiteBaseIntegerBuilder";constructor(e,t,i){super(e,t,i),this.config.autoIncrement=!1}primaryKey(e){return e?.autoIncrement&&(this.config.autoIncrement=!0),this.config.hasDefault=!0,super.primaryKey()}}class SQLiteBaseInteger extends i{static[e]="SQLiteBaseInteger";autoIncrement=this.config.autoIncrement;getSQLType(){return"integer"}}class SQLiteIntegerBuilder extends SQLiteBaseIntegerBuilder{static[e]="SQLiteIntegerBuilder";constructor(e){super(e,"number","SQLiteInteger")}build(e){return new SQLiteInteger(e,this.config)}}class SQLiteInteger extends SQLiteBaseInteger{static[e]="SQLiteInteger"}class SQLiteTimestampBuilder extends SQLiteBaseIntegerBuilder{static[e]="SQLiteTimestampBuilder";constructor(e,t){super(e,"date","SQLiteTimestamp"),this.config.mode=t}defaultNow(){return this.default(n`(cast((julianday('now') - 2440587.5)*86400000 as integer))`)}build(e){return new SQLiteTimestamp(e,this.config)}}class SQLiteTimestamp extends SQLiteBaseInteger{static[e]="SQLiteTimestamp";mode=this.config.mode;mapFromDriverValue(e){return"timestamp"===this.config.mode?new Date(1e3*e):new Date(e)}mapToDriverValue(e){const t=e.getTime();return"timestamp"===this.config.mode?Math.floor(t/1e3):t}}class SQLiteBooleanBuilder extends SQLiteBaseIntegerBuilder{static[e]="SQLiteBooleanBuilder";constructor(e,t){super(e,"boolean","SQLiteBoolean"),this.config.mode=t}build(e){return new SQLiteBoolean(e,this.config)}}class SQLiteBoolean extends SQLiteBaseInteger{static[e]="SQLiteBoolean";mode=this.config.mode;mapFromDriverValue(e){return 1===Number(e)}mapToDriverValue(e){return e?1:0}}class SQLiteTextBuilder extends t{static[e]="SQLiteTextBuilder";constructor(e,t){super(e,"string","SQLiteText"),this.config.enumValues=t.enum,this.config.length=t.length}build(e){return new SQLiteText(e,this.config)}}class SQLiteText extends i{static[e]="SQLiteText";enumValues=this.config.enumValues;length=this.config.length;constructor(e,t){super(e,t)}getSQLType(){return"text"+(this.config.length?`(${this.config.length})`:"")}}class SQLiteTextJsonBuilder extends t{static[e]="SQLiteTextJsonBuilder";constructor(e){super(e,"json","SQLiteTextJson")}build(e){return new SQLiteTextJson(e,this.config)}}class SQLiteTextJson extends i{static[e]="SQLiteTextJson";getSQLType(){return"text"}mapFromDriverValue(e){return JSON.parse(e)}mapToDriverValue(e){return JSON.stringify(e)}}function text(e,t={}){return"json"===t.mode?new SQLiteTextJsonBuilder(e):new SQLiteTextBuilder(e,t)}const a=s("Customers",{customerId:(o="CustomerId","timestamp"===u?.mode||"timestamp_ms"===u?.mode?new SQLiteTimestampBuilder(o,u.mode):"boolean"===u?.mode?new SQLiteBooleanBuilder(o,u.mode):new SQLiteIntegerBuilder(o)).primaryKey(),companyName:text("CompanyName"),contactName:text("ContactName")});var o,u;const c=r((async({context:e})=>{const t=await e.db.select().from(a).all();return console.log(e.db),{data:t}}));export{c as default};
//# sourceMappingURL=teste.get.mjs.map
